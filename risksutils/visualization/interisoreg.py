from collections import namedtuple
from sklearn.isotonic import IsotonicRegression
from statsmodels.stats.proportion import proportion_confint
import holoviews as hv
import numpy as np
import pandas as pd


Plot = namedtuple('Plot', ['selector', 'diagram'])


class InterIsoReg():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""

    def __init__(self, data, pdims, tdims, ddims=None, gdims=None,
                 calibrations_data=None):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
          data: pandas.DataFrame
            —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
          pdims: list
            —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
          tdims: list
            —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          ddims: list
            –¥–∞—Ç—ã
          gdims: list
            –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª—å–Ω—ã–µ –ø–æ–ª—è

        –†–µ–∑—É–ª—å—Ç–∞—Ç:
            InterIsoReg - –æ–±—ä–µ–∫—Ç —Å –Ω–∞–±–æ—Ä–æ–º
            –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
        """
        self.data = data
        self._pdims = pdims
        self._tdims = tdims
        self._gdims = gdims
        self._ddims = ddims
        self._calibrations_data = calibrations_data
        self._check_fields()        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–ª–µ–π
        self._load_calibrations()   # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self._diagrams = {}         # –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã
        self._make_bars_static()    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        self._make_area_static()    # –° –¥–∞—Ç–∞–º–∏
        self._make_charts()         # –ö–æ–Ω–≤–µ—Ä—Ç–∏–º –∏—Ö –≤ –≥–æ—Ç–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        self._make_isotinic_plot()

    def _get_count(self, dim, conditions=None):

        if conditions is None:
            df = self.data
        else:
            df = self.data.loc[conditions]

        return (df.groupby(dim)
                  .size()
                  .reset_index()
                  .rename(columns={0: 'count'}))

    def _make_bars_static(self):
        """–°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        for dim in self._gdims:
            df = self._get_count(dim)
            diagram = (hv.Bars(df, kdims=[dim], vdims=['count'])
                         .opts(plot=dict(tools=['tap'])))
            selector = (hv.streams
                          .Selection1D(source=diagram)
                          .rename(index=dim))
            self._diagrams[dim] = Plot(selector, diagram)

    def _make_area_static(self):
        """–°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–∏–∞–ø–æ–∑–æ–Ω–∞ –¥–∞—Ç"""
        for dim in self._ddims:
            df = self._get_count(dim)
            diagram = hv.Area(df, kdims=[dim], vdims=['count'])
            selector = (hv.streams
                          .BoundsX(source=diagram)
                          .rename(boundsx=dim))
            self._diagrams[dim] = Plot(selector, diagram)

    def _conditions(self, **kwargs):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–ª–æ–≤–∏—è –¥–ª—è –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º"""
        conditions = np.repeat(True, len(self.data))  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–µ–º True

        for dim, value in kwargs.items():           # –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if dim in self._gdims:                  # —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–ª—è–º–∏
                selector, diagram = self._diagrams[dim]
                categories = diagram.data.loc[value][dim]
                if len(categories):
                    conditions &= self.data[dim].isin(categories) # –ë—É–ª–µ–≤ AND,
                                                                  # –∫–∞–∫ +=

            elif dim in self._ddims:
                selector, diagram = self._diagrams[dim]
                if value:
                    left, right = value
                    left = pd.to_datetime(left, unit='ms')    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑
                    right = pd.to_datetime(right, unit='ms')  # –º–ª—Å–µ–∫ –≤ –¥–∞—Ç—ã
                    conditions &= self.data[dim].between(left, right)
        return conditions

    def _make_charts(self):
        """–°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω—è—é—â–µ–π—Å—è"""
        for dim in self._gdims + self._ddims:
            self.__dict__[dim] = (            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –∞—Ç—Ä–∏–±—É—Ç—ã
                self._diagrams[dim].diagram   # self. –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ, –µ—Å–ª–∏ —Å —Ç–∞–∫–∏–º
              * self._make_one_chart(dim))    # –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å

    def _make_one_chart(self, dim):
        """–û–¥–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"""

        selectors = [s for s, d in self._diagrams.values()]

        if dim in self._ddims:
            diagram_type = hv.Area
        elif dim in self._gdims:
            diagram_type = hv.Bars

        def bar(**kwargs):
            data = self._get_count(dim, self._conditions(**kwargs))
            return diagram_type(data, kdims=[dim], vdims=['count'])

        return hv.DynamicMap(bar, streams=selectors)

    def _make_isotinic_plot(self):
        """–°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å IR"""

        kdims = [hv.Dimension('predict', values=self._pdims),
                 hv.Dimension('target', values=self._tdims)]

        selectors = [s for s, d in self._diagrams.values()]

        def chart(target, predict, **kwargs):
            condisions = self._conditions(**kwargs)
            data = self.data.loc[condisions]
            df = isotonic_plot_data(data, target, predict)
            confident_intervals = (hv.Area(df, kdims=['pred'],
                                           vdims=['ci_l', 'ci_h'])
                                     .opts(style=dict(alpha=0.5)))
            curve = hv.Curve(df, kdims=['pred'], vdims=['isotonic'])

            if self._calibrations_data is not None:
                if target in self.calibrations.columns:
                    calibr_curve = hv.Curve(self.calibrations,
                                            kdims=['pred'], vdims=[target])
                    return confident_intervals * curve * calibr_curve

            return confident_intervals * curve

        iso_chart = hv.DynamicMap(chart, kdims=kdims, streams=selectors)
        self.__dict__['isotonic'] = iso_chart

    def _load_calibrations(self):
        if isinstance(self._calibrations_data, str):
            self.calibrations = pd.read_csv(self._calibrations_data)
        elif isinstance(self._calibrations_data, pd.DataFrame):
            self.calibrations = self._calibrations_data

    def _check_fields(self):
        """–ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ —Ñ–æ—Ä–º–∞—Ç–∞"""
        assert isinstance(self.data, pd.DataFrame), 'data must be DataFrame'
        assert self._pdims is not None, '{} must be not None'.format('pdims')
        assert self._tdims is not None, '{} must be not None'.format('tdims')

        if self._ddims is None:
            self._ddims = []
        if self._gdims is None:
            self._gdims = []

        for dims in [self._gdims, self._tdims, self._ddims, self._pdims]:
            assert isinstance(dims, list), '{} must be list'.format(dims)
            for col in dims:
                assert col in self.data.columns, '{} must be a column of data'


def isotonic_plot_data(df, target, predict):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è Isotonic –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    reg = IsotonicRegression()
    return (df[[predict, target]]                  # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–æ–ª—è
             .rename(columns={predict: 'pred',
                              target: 'target'})  # –º–µ–Ω—è–µ–º –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
             .assign(isotonic=lambda df:          # –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ IR
                      reg.fit_transform(          # –æ–±—É—á–∞–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑.
                          X=(df['pred']           # üî´IR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å
                             + 1e-7 * np.random.rand(len(df))),
                          y=df['target']          # –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                      ))                          # –ø–æ—ç—Ç–æ–º—É –∫–æ—Å—Ç—ã–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –∏—Ö
             .groupby('isotonic')                 # —Ä–∞–∑–Ω—ã–º–∏.
             .agg({'target': ['sum', 'count'],    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ir
                   'pred': ['min', 'max']})       # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º target
             .reset_index()
             .pipe(confident_intervals)           # –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
             .pipe(stack_min_max))                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç


def confident_intervals(df):
    """–î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
    df['ci_l'], df['ci_h'] = proportion_confint(
        count=df['target']['sum'],
        nobs=df['target']['count'],
        alpha=0.05,
        method='beta'
    )
    df['ci_l'] = df['ci_l'].fillna(0)
    df['ci_h'] = df['ci_h'].fillna(1)
    return df


def stack_min_max(df):
    """–ü–µ—Ä–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
    stack = (df['pred']                      # pred - –ú—É–ª—å—Ç–∏ –ò–Ω–¥–µ–∫—Å,
                                             # –≤–∫–ª—é—á–∞—é—â–∏–π min, max
               .stack()                      # –ö–∞–∂–¥–æ–π —Å—Ç—Ä–æ—á–∫–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º
                                             # –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
               .reset_index(1, drop=True)    # –¥–ª—è min –∏ –¥–ª—è max,
               .rename('pred'))              # –∞ –ø–æ—Ç–æ–º –º–µ–Ω—è–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    df = pd.concat([stack, df['isotonic'],
                    df['ci_l'], df['ci_h']], axis=1)
    df['ci_l'] = df['ci_l'].cummax()         # –î–µ–ª–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–º–∏
    df['ci_h'] = df[::-1]['ci_h'].cummin()[::-1]
    return df
